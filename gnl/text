Your project must be written in accordance with the Norm. If you have bonus
ﬁles/functions, they are included in the norm check and you will receive a 0 if there
is a norm error inside.
• Your functions should not quit unexpectedly (segmentation fault, bus error, double
		free, etc) apart from undeﬁned behaviors. If this happens, your project will be
considered non functional and will receive a 0 during the evaluation.
• All heap allocated memory space must be properly freed when necessary. No leaks
will be tolerated.
• If the subject requires it, you must submit a Makefile which will compile your
source ﬁles to the required output with the ﬂags -Wall, -Wextra and -Werror, and
your Makeﬁle must not relink.
• Your Makefile must at least contain the rules $(NAME), all, clean, fclean and
re.
• To turn in bonuses to your project, you must include a rule bonus to your Makeﬁle,
	which will add all the various headers, librairies or functions that are forbidden on
	the main part of the project. Bonuses must be in a diﬀerent ﬁle _bonus.{c/h}.
	Mandatory and bonus part evaluation is done separately.
	• If your project allows you to use your libft, you must copy its sources and its
	associated Makefile in a libft folder with its associated Makeﬁle. Your project’s
	Makefile must compile the library by using its Makefile, then compile the project.
	• We encourage you to create test programs for your project even though this work
	won’t have to be submitted and won’t be graded. It will give you a chance
	to easily test your work and your peers’ work. You will ﬁnd those tests especially
	useful during your defence. Indeed, during defence, you are free to use your tests
	and/or the tests of the peer you are evaluating.
	• Submit your work to your assigned git repository. Only the work in the git reposi-
	tory will be graded. If Deepthought is assigned to grade your work, it will be done
	after your peer-evaluations. If an error happens in any section of your work during
	Deepthought’s grading, the evaluation will stop.
